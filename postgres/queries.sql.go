// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package postgres

import (
	"context"
)

const createIndex = `-- name: CreateIndex :exec
INSERT INTO document_index(name, set_name, content_type, mappings)
VALUES ($1, $2, $3, $4)
`

type CreateIndexParams struct {
	Name        string
	SetName     string
	ContentType string
	Mappings    []byte
}

func (q *Queries) CreateIndex(ctx context.Context, arg CreateIndexParams) error {
	_, err := q.db.Exec(ctx, createIndex,
		arg.Name,
		arg.SetName,
		arg.ContentType,
		arg.Mappings,
	)
	return err
}

const createIndexSet = `-- name: CreateIndexSet :exec
INSERT INTO index_set(name, position)
VALUES ($1, $2)
`

type CreateIndexSetParams struct {
	Name     string
	Position int64
}

func (q *Queries) CreateIndexSet(ctx context.Context, arg CreateIndexSetParams) error {
	_, err := q.db.Exec(ctx, createIndexSet, arg.Name, arg.Position)
	return err
}

const getIndexMappings = `-- name: GetIndexMappings :one
SELECT mappings
FROM document_index
WHERE name = $1
FOR UPDATE
`

func (q *Queries) GetIndexMappings(ctx context.Context, name string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getIndexMappings, name)
	var mappings []byte
	err := row.Scan(&mappings)
	return mappings, err
}

const getIndexSetPosition = `-- name: GetIndexSetPosition :one
SELECT position
FROM index_set
WHERE name = $1
`

func (q *Queries) GetIndexSetPosition(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, getIndexSetPosition, name)
	var position int64
	err := row.Scan(&position)
	return position, err
}

const listIndexSets = `-- name: ListIndexSets :many
SELECT name FROM index_set
`

func (q *Queries) ListIndexSets(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listIndexSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIndexMappings = `-- name: UpdateIndexMappings :exec
UPDATE document_index
SET mappings = $1
WHERE name = $2
`

type UpdateIndexMappingsParams struct {
	Mappings []byte
	Name     string
}

func (q *Queries) UpdateIndexMappings(ctx context.Context, arg UpdateIndexMappingsParams) error {
	_, err := q.db.Exec(ctx, updateIndexMappings, arg.Mappings, arg.Name)
	return err
}

const updateSetPosition = `-- name: UpdateSetPosition :exec
UPDATE index_set
SET position = $1
WHERE name = $2
`

type UpdateSetPositionParams struct {
	Position int64
	Name     string
}

func (q *Queries) UpdateSetPosition(ctx context.Context, arg UpdateSetPositionParams) error {
	_, err := q.db.Exec(ctx, updateSetPosition, arg.Position, arg.Name)
	return err
}
